import os
import csv
import glob
import json
from django.contrib import admin
from unfold.admin import ModelAdmin
from django.utils.html import format_html
from django.contrib import messages
from django.conf import settings
from django.urls import path
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.utils import timezone

from .models import CSVFile, CSVData


@admin.register(CSVFile)
class CSVFileAdmin(ModelAdmin):
    list_display = [
        'filename',
        'file_status',
        'file_size',
        'row_count',
        'upload_date',
        'custom_actions'
    ]
    list_filter = ['status', 'upload_date']
    search_fields = ['filename']
    readonly_fields = [
        'filename',
        'upload_date',
        'processed_date',
        'row_count',
        'error_message',
        'file_info'
    ]

    # actions –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Ç–æ–¥–æ–≤
    actions = ['process_selected_files_action']

    def get_queryset(self, request):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞"""
        self.scan_csv_files()
        return super().get_queryset(request)

    def scan_csv_files(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–æ–≤"""
        csv_files = glob.glob(os.path.join(settings.BASE_DIR, "*.csv"))

        for csv_path in csv_files:
            filename = os.path.basename(csv_path)
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—â–µ –Ω–µ –≤ –±–∞–∑–µ
            if not CSVFile.objects.filter(filename=filename).exists():
                CSVFile.objects.create(filename=filename)

    def file_status(self, obj):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏"""
        status_config = {
            'pending': ('‚ö™', 'gray', '–û–∂–∏–¥–∞–µ—Ç'),
            'processing': ('üü°', 'orange', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
            'completed': ('üü¢', 'green', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
            'error': ('üî¥', 'red', '–û—à–∏–±–∫–∞'),
        }

        icon, color, text = status_config.get(obj.status, ('‚ö™', 'gray', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))

        return format_html(
            '<span style="color: {};">{} {}</span>',
            color,
            icon,
            text
        )

    file_status.short_description = "–°—Ç–∞—Ç—É—Å"

    def file_size(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        return obj.get_file_size()

    file_size.short_description = "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"

    def custom_actions(self, obj):
        """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å actions)"""
        buttons = []

        if obj.status in ['pending', 'error'] and obj.file_exists:
            buttons.append(
                format_html(
                    '<a href="{}" class="button" style="background: #4CAF50; color: white; padding: 5px 10px; text-decoration: none; border-radius: 4px; margin-right: 5px;">üì• –ò–º–ø–æ—Ä—Ç</a>',
                    f'{obj.id}/process/'
                )
            )

        if obj.status == 'completed':
            buttons.append(
                format_html(
                    '<a href="{}" class="button" style="background: #2196F3; color: white; padding: 5px 10px; text-decoration: none; border-radius: 4px; margin-right: 5px;">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</a>',
                    f'../csvdata/?csv_file__id__exact={obj.id}'
                )
            )

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if obj.status == 'completed' and obj.file_exists:
            buttons.append(
                format_html(
                    '<a href="{}" class="button" style="background: #FF9800; color: white; padding: 5px 10px; text-decoration: none; border-radius: 4px; margin-right: 5px;">üîÑ –ü–æ–≤—Ç–æ—Ä</a>',
                    f'{obj.id}/process/'
                )
            )

        if not obj.file_exists:
            buttons.append(
                format_html(
                    '<span style="color: red; padding: 5px 10px;">‚ùå –§–∞–π–ª —É–¥–∞–ª–µ–Ω</span>'
                )
            )

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if obj.status == 'completed':
            buttons.append(
                format_html(
                    '<a href="{}" class="button" style="background: #f44336; color: white; padding: 5px 10px; text-decoration: none; border-radius: 4px;" onclick="return confirm(\'–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞?\')">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</a>',
                    f'{obj.id}/delete_data/'
                )
            )

        return format_html(''.join(buttons)) if buttons else "-"

    custom_actions.short_description = "–î–µ–π—Å—Ç–≤–∏—è"

    def file_info(self, obj):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        if not obj.file_exists:
            return format_html('<p style="color: red;">‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ</p>')

        info_lines = [
            f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {obj.full_path}",
            f"–†–∞–∑–º–µ—Ä: {obj.get_file_size()}",
            f"–°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'–î–∞' if obj.file_exists else '–ù–µ—Ç'}",
        ]

        return format_html('<pre>{}</pre>', '\n'.join(info_lines))

    file_info.short_description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ"

    def process_selected_files_action(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        success_count = 0
        error_count = 0

        for csv_file in queryset:
            try:
                if not csv_file.file_exists:
                    self.message_user(request, f"–§–∞–π–ª {csv_file.filename} –Ω–µ –Ω–∞–π–¥–µ–Ω", messages.ERROR)
                    error_count += 1
                    continue

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                imported_rows = self.import_csv_data(csv_file)

                csv_file.status = 'completed'
                csv_file.row_count = imported_rows
                csv_file.processed_date = timezone.now()
                csv_file.save()

                success_count += 1
                self.message_user(request, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_rows} —Å—Ç—Ä–æ–∫ –∏–∑ {csv_file.filename}",
                                  messages.SUCCESS)

            except Exception as e:
                csv_file.status = 'error'
                csv_file.error_message = str(e)
                csv_file.save()
                error_count += 1
                self.message_user(request, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {csv_file.filename}: {str(e)}", messages.ERROR)

        if success_count:
            self.message_user(request, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {success_count}", messages.SUCCESS)
        if error_count:
            self.message_user(request, f"–û—à–∏–±–æ–∫: {error_count}", messages.ERROR)

    process_selected_files_action.short_description = "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ CSV —Ñ–∞–π–ª—ã"

    def process_csv_view(self, request, object_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞"""
        try:
            csv_file = CSVFile.objects.get(id=object_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not csv_file.file_exists:
                messages.error(request, f"–§–∞–π–ª {csv_file.filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
                return HttpResponseRedirect(reverse('admin:csv_importer_csvfile_changelist'))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            csv_file.status = 'processing'
            csv_file.error_message = ''
            csv_file.save()

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            imported_rows = self.import_csv_data(csv_file)

            csv_file.status = 'completed'
            csv_file.row_count = imported_rows
            csv_file.processed_date = timezone.now()
            csv_file.save()

            messages.success(request, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_rows} —Å—Ç—Ä–æ–∫ –∏–∑ {csv_file.filename}")

        except Exception as e:
            csv_file.status = 'error'
            csv_file.error_message = str(e)
            csv_file.save()
            messages.error(request, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {csv_file.filename}: {str(e)}")

        return HttpResponseRedirect(reverse('admin:csv_importer_csvfile_changelist'))

    def delete_data_view(self, request, object_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–ª–∞"""
        try:
            csv_file = CSVFile.objects.get(id=object_id)
            deleted_count, _ = CSVData.objects.filter(csv_file=csv_file).delete()

            csv_file.status = 'pending'
            csv_file.row_count = 0
            csv_file.error_message = ''
            csv_file.save()

            messages.success(request, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∞–π–ª–∞ {csv_file.filename}")

        except Exception as e:
            messages.error(request, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

        return HttpResponseRedirect(reverse('admin:csv_importer_csvfile_changelist'))

    def import_csv_data(self, csv_file):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open(csv_file.full_path, 'r', encoding='utf-8') as file:
                return self._process_csv_file(csv_file, file)
        except UnicodeDecodeError:
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            try:
                with open(csv_file.full_path, 'r', encoding='cp1251') as file:
                    return self._process_csv_file(csv_file, file)
            except UnicodeDecodeError:
                with open(csv_file.full_path, 'r', encoding='latin-1') as file:
                    return self._process_csv_file(csv_file, file)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def _process_csv_file(self, csv_file, file):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–∞"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        CSVData.objects.filter(csv_file=csv_file).delete()

        csv_reader = csv.DictReader(file)
        data_rows = []

        for row_num, row in enumerate(csv_reader, 1):
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            cleaned_row = {
                key.strip(): value.strip() if isinstance(value, str) else value
                for key, value in row.items()
                if key and key.strip()  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            }

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not any(cleaned_row.values()):
                continue

            data_rows.append(CSVData(
                csv_file=csv_file,
                row_number=row_num,
                data=cleaned_row
            ))

        # –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if data_rows:
            CSVData.objects.bulk_create(data_rows)
        return len(data_rows)

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('<path:object_id>/process/', self.admin_site.admin_view(self.process_csv_view), name='csv_process'),
            path('<path:object_id>/delete_data/', self.admin_site.admin_view(self.delete_data_view),
                 name='csv_delete_data'),
        ]
        return custom_urls + urls


@admin.register(CSVData)
class CSVDataAdmin(ModelAdmin):
    list_display = ['csv_file', 'row_number', 'preview_data', 'import_date']
    list_filter = ['csv_file', 'import_date']
    search_fields = ['data', 'csv_file__filename']
    readonly_fields = ['csv_file', 'row_number', 'data_preview', 'import_date']

    def preview_data(self, obj):
        """–ö—Ä–∞—Ç–∫–∏–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"""
        data_str = json.dumps(obj.data, ensure_ascii=False)
        preview = data_str[:100] + "..." if len(data_str) > 100 else data_str
        return format_html('<code style="font-size: 0.9em;">{}</code>', preview)

    preview_data.short_description = "–î–∞–Ω–Ω—ã–µ"

    def data_preview(self, obj):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–º–∏–Ω–∫–µ"""
        formatted_data = json.dumps(obj.data, ensure_ascii=False, indent=2)
        return format_html(
            '<pre style="background: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; font-size: 0.9em;">{}</pre>',
            formatted_data
        )

    data_preview.short_description = "–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False

    def has_delete_permission(self, request, obj=None):
        return True